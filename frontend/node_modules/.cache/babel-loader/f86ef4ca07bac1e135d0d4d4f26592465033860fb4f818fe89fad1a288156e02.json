{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\OneDrive - Universidad de Deusto\\\\Documentos\\\\nirs_web_app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FileUploader from './components/FileUploader';\nimport FileList from './components/FileList';\nimport ActivitySelector from './components/ActivitySelector';\nimport PlotViewer from './components/PlotViewer';\nimport './styles/App.css';\nimport InterpretationViewer from './components/InterpretationViewer';\nimport FeatureImportanceViewer from './components/FeatureImportanceViewer';\nimport TemporalValidationResults from './components/TemporalValidationResults';\nimport { fetchAvailableFiles, analyzeFile, runTemporalValidation } from './api/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State management\n  const [files, setFiles] = useState([]);\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [selectedActivities, setSelectedActivities] = useState({});\n  const [plots, setPlots] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [analysisProgress, setAnalysisProgress] = useState({});\n\n  // Load available files on component mount\n  useEffect(() => {\n    const loadFiles = async () => {\n      try {\n        const availableFiles = await fetchAvailableFiles();\n        setFiles(availableFiles);\n      } catch (err) {\n        console.error('Error loading files:', err);\n        setError('Failed to load available files');\n      }\n    };\n    loadFiles();\n  }, []);\n\n  // Handle file selection\n  const handleFileSelect = fileId => {\n    const isSelected = selectedFiles.includes(fileId);\n    if (isSelected) {\n      setSelectedFiles(selectedFiles.filter(id => id !== fileId));\n      setSelectedActivities(prev => {\n        const updated = {\n          ...prev\n        };\n        delete updated[fileId];\n        return updated;\n      });\n    } else {\n      setSelectedFiles([...selectedFiles, fileId]);\n    }\n  };\n  const handleFileDelete = async fileId => {\n    try {\n      // Call API to delete the file (if you have a delete endpoint)\n      // await deleteFile(fileId);\n\n      // Remove from selected files\n      if (selectedFiles.includes(fileId)) {\n        setSelectedFiles(selectedFiles.filter(id => id !== fileId));\n      }\n\n      // Remove from selected activities\n      if (selectedActivities[fileId]) {\n        setSelectedActivities(prev => {\n          const updated = {\n            ...prev\n          };\n          delete updated[fileId];\n          return updated;\n        });\n      }\n\n      // Remove from files list\n      setFiles(prev => prev.filter(file => file.id !== fileId));\n    } catch (err) {\n      console.error('Error deleting file:', err);\n      setError('Failed to delete file');\n    }\n  };\n  // Handle successful file upload\n  const handleFileUpload = uploadedFile => {\n    setFiles(prev => [...prev, uploadedFile]);\n  };\n\n  // Handle activity selection\n  const handleActivitySelect = (fileId, selectedActivitiesList) => {\n    setSelectedActivities(prev => ({\n      ...prev,\n      [fileId]: selectedActivitiesList\n    }));\n  };\n\n  // Handle analysis request\n  const handleAnalyze = async () => {\n    setLoading(true);\n    setError(null);\n    setPlots({});\n\n    // Initialize progress state for each file\n    const initialProgress = {};\n    selectedFiles.forEach(fileId => {\n      var _selectedActivities$f;\n      if (((_selectedActivities$f = selectedActivities[fileId]) === null || _selectedActivities$f === void 0 ? void 0 : _selectedActivities$f.length) > 0) {\n        initialProgress[fileId] = {\n          status: 'preparing',\n          message: 'Preparing analysis...',\n          progress: 0\n        };\n      }\n    });\n    setAnalysisProgress(initialProgress);\n    try {\n      const results = {};\n      for (const fileId of selectedFiles) {\n        if (selectedActivities[fileId] && selectedActivities[fileId].length > 0) {\n          var _fileResult$features, _fileResult$features$;\n          // Update progress - starting analysis\n          setAnalysisProgress(prev => ({\n            ...prev,\n            [fileId]: {\n              status: 'loading',\n              message: 'Loading data and extracting features...',\n              progress: 10\n            }\n          }));\n\n          // Wait a little to show first stage\n          await new Promise(r => setTimeout(r, 500));\n\n          // Update progress - SVM tuning\n          setAnalysisProgress(prev => ({\n            ...prev,\n            [fileId]: {\n              status: 'tuning',\n              message: 'Tuning SVM classifier...',\n              progress: 30\n            }\n          }));\n          await new Promise(r => setTimeout(r, 500));\n\n          // Update progress - RandomForest tuning\n          setAnalysisProgress(prev => ({\n            ...prev,\n            [fileId]: {\n              status: 'tuning',\n              message: 'Tuning RandomForest classifier...',\n              progress: 60\n            }\n          }));\n          await new Promise(r => setTimeout(r, 500));\n\n          // Update progress - Ridge tuning  \n          setAnalysisProgress(prev => ({\n            ...prev,\n            [fileId]: {\n              status: 'tuning',\n              message: 'Tuning Ridge classifier...',\n              progress: 80\n            }\n          }));\n          const fileResult = await analyzeFile(fileId, selectedActivities[fileId]);\n\n          // Update progress - completed\n          setAnalysisProgress(prev => ({\n            ...prev,\n            [fileId]: {\n              status: 'completed',\n              message: 'Analysis completed',\n              progress: 100\n            }\n          }));\n\n          // Log the most important feature\n          if (((_fileResult$features = fileResult.features) === null || _fileResult$features === void 0 ? void 0 : (_fileResult$features$ = _fileResult$features.top_features) === null || _fileResult$features$ === void 0 ? void 0 : _fileResult$features$.length) > 0) {\n            // Log feature details\n            const feature = fileResult.features.top_features[0];\n            const region = feature.split('_')[0] || 'unknown';\n            const wavelength = feature.includes('850') ? '850nm (oxyHb)' : feature.includes('760') ? '760nm (deoxyHb)' : 'unknown';\n            console.log(`   Region: ${region}`);\n            console.log(`   Wavelength: ${wavelength}`);\n            console.log(`   Relative importance: Highest F-score among all features`);\n          } else {\n            console.log(`No important features found for ${fileId}`);\n          }\n          results[fileId] = fileResult;\n        }\n      }\n      setPlots(results);\n    } catch (err) {\n      console.error('Analysis error:', err);\n      setError('An error occurred during analysis');\n\n      // Mark all analyses in progress as failed\n      setAnalysisProgress(prev => {\n        const updated = {\n          ...prev\n        };\n        Object.keys(updated).forEach(fileId => {\n          if (updated[fileId].status !== 'completed') {\n            updated[fileId] = {\n              status: 'error',\n              message: 'Analysis failed',\n              progress: 0\n            };\n          }\n        });\n        return updated;\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  // Handle Temporal Validation request\n  const handleTemporalValidation = async () => {\n    setLoading(true);\n    setError(null);\n    setPlots({}); // Clear previous results or decide if you want to merge/keep them\n\n    const initialProgress = {};\n    selectedFiles.forEach(fileId => {\n      var _selectedActivities$f2;\n      if (((_selectedActivities$f2 = selectedActivities[fileId]) === null || _selectedActivities$f2 === void 0 ? void 0 : _selectedActivities$f2.length) > 0) {\n        initialProgress[fileId] = {\n          status: 'validating',\n          // Specific status for validation\n          message: 'Preparing temporal validation...',\n          progress: 0\n        };\n      }\n    });\n    setAnalysisProgress(initialProgress);\n    try {\n      const validationResults = {};\n      for (const fileId of selectedFiles) {\n        if (selectedActivities[fileId] && selectedActivities[fileId].length > 0) {\n          setAnalysisProgress(prev => ({\n            ...prev,\n            [fileId]: {\n              status: 'validating',\n              message: 'Running temporal bias checks...',\n              progress: 50 // Mid-point progress\n            }\n          }));\n\n          // Call the temporal validation API endpoint\n          const fileResult = await runTemporalValidation(fileId, selectedActivities[fileId]);\n          setAnalysisProgress(prev => ({\n            ...prev,\n            [fileId]: {\n              status: 'completed',\n              // Mark as completed after validation\n              message: 'Temporal validation completed',\n              progress: 100\n            }\n          }));\n          validationResults[fileId] = fileResult; // Store validation results\n        }\n      }\n      setPlots(validationResults); // Update state with validation results\n    } catch (err) {\n      console.error('Temporal validation error:', err);\n      setError('An error occurred during temporal validation');\n      // Mark ongoing validations as error\n      setAnalysisProgress(prev => {\n        const updated = {\n          ...prev\n        };\n        Object.keys(updated).forEach(fileId => {\n          if (updated[fileId].status === 'validating') {\n            updated[fileId] = {\n              status: 'error',\n              message: 'Validation failed',\n              progress: 0\n            };\n          }\n        });\n        return updated;\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"NIRS Analysis Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"file-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"NIRS Files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FileUploader, {\n          onFileUpload: handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FileList, {\n          files: files,\n          selectedFiles: selectedFiles,\n          onSelectFile: handleFileSelect,\n          onDeleteFile: handleFileDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"activity-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Activities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), selectedFiles.length > 0 ? selectedFiles.map(fileId => {\n          var _files$find;\n          return /*#__PURE__*/_jsxDEV(ActivitySelector, {\n            fileId: fileId,\n            fileName: ((_files$find = files.find(file => file.id === fileId)) === null || _files$find === void 0 ? void 0 : _files$find.name) || fileId,\n            onSelectActivities: activities => handleActivitySelect(fileId, activities)\n          }, fileId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"info-text\",\n          children: \"Select files to view available activities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this), selectedFiles.length > 0 && Object.keys(selectedActivities).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"analyze-button\",\n            onClick: handleAnalyze,\n            disabled: loading,\n            children: loading ? 'Analyzing...' : 'Analyze Selected Data'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"validate-button\",\n            disabled: loading // This is correct, using 'loading' instead of 'isLoading'\n            ,\n            onClick: handleTemporalValidation,\n            children: \"Validate Against Temporal Bias\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 3\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 21\n        }, this), Object.entries(analysisProgress).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-progress\",\n          children: Object.entries(analysisProgress).map(([fileId, progress]) => {\n            var _files$find2;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"file-progress\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"file-progress-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: ((_files$find2 = files.find(file => file.id === fileId)) === null || _files$find2 === void 0 ? void 0 : _files$find2.name) || fileId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `status-badge ${progress.status}`,\n                  children: [progress.status === 'tuning' && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"loading-dots\",\n                    children: [\"\\u2699\\uFE0F Optimizing parameters\", /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \".\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 349,\n                      columnNumber: 80\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \".\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 349,\n                      columnNumber: 94\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \".\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 349,\n                      columnNumber: 108\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 349,\n                    columnNumber: 25\n                  }, this), progress.status === 'validating' && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"loading-dots\",\n                    children: [\"\\uD83D\\uDEE1\\uFE0F Validating\", /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \".\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 352,\n                      columnNumber: 70\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \".\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 352,\n                      columnNumber: 84\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \".\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 352,\n                      columnNumber: 98\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 352,\n                    columnNumber: 25\n                  }, this), progress.status === 'loading' && '🔍 Analyzing', progress.status === 'completed' && '✅ Completed', progress.status === 'error' && '❌ Error']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 347,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress-bar-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `progress-bar ${progress.status}`,\n                  style: {\n                    width: `${progress.progress}%`\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress-message\",\n                children: progress.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 19\n              }, this)]\n            }, fileId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"results-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Analysis Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this), Object.entries(plots).map(([fileId, plotData]) => {\n          var _files$find3, _plotData$plots, _plotData$features, _plotData$features2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"result-container\",\n            children: [/*#__PURE__*/_jsxDEV(PlotViewer, {\n              fileName: ((_files$find3 = files.find(file => file.id === fileId)) === null || _files$find3 === void 0 ? void 0 : _files$find3.name) || fileId,\n              plotData: plotData\n            }, `plot-${fileId}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 15\n            }, this), ((_plotData$plots = plotData.plots) === null || _plotData$plots === void 0 ? void 0 : _plotData$plots.feature_importance) && ((_plotData$features = plotData.features) === null || _plotData$features === void 0 ? void 0 : _plotData$features.top_features) && /*#__PURE__*/_jsxDEV(FeatureImportanceViewer, {\n              featureImportanceData: plotData.plots.feature_importance,\n              topFeatures: plotData.features.top_features\n            }, `feat-imp-${fileId}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 15\n            }, this), plotData.temporal_validation && /*#__PURE__*/_jsxDEV(TemporalValidationResults, {\n              validationData: plotData.temporal_validation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(InterpretationViewer, {\n              interpretationData: plotData.interpretation || {},\n              topFeatures: ((_plotData$features2 = plotData.features) === null || _plotData$features2 === void 0 ? void 0 : _plotData$features2.top_features) || []\n            }, `interp-${fileId}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 13\n            }, this)]\n          }, fileId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 13\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oD3w/lvkDAi1JHGIlxmZvQ2MOko=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","FileUploader","FileList","ActivitySelector","PlotViewer","InterpretationViewer","FeatureImportanceViewer","TemporalValidationResults","fetchAvailableFiles","analyzeFile","runTemporalValidation","jsxDEV","_jsxDEV","App","_s","files","setFiles","selectedFiles","setSelectedFiles","selectedActivities","setSelectedActivities","plots","setPlots","loading","setLoading","error","setError","analysisProgress","setAnalysisProgress","loadFiles","availableFiles","err","console","handleFileSelect","fileId","isSelected","includes","filter","id","prev","updated","handleFileDelete","file","handleFileUpload","uploadedFile","handleActivitySelect","selectedActivitiesList","handleAnalyze","initialProgress","forEach","_selectedActivities$f","length","status","message","progress","results","_fileResult$features","_fileResult$features$","Promise","r","setTimeout","fileResult","features","top_features","feature","region","split","wavelength","log","Object","keys","handleTemporalValidation","_selectedActivities$f2","validationResults","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onFileUpload","onSelectFile","onDeleteFile","map","_files$find","find","name","onSelectActivities","activities","onClick","disabled","entries","_files$find2","style","width","plotData","_files$find3","_plotData$plots","_plotData$features","_plotData$features2","feature_importance","featureImportanceData","topFeatures","temporal_validation","validationData","interpretationData","interpretation","_c","$RefreshReg$"],"sources":["C:/Users/PC/OneDrive - Universidad de Deusto/Documentos/nirs_web_app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FileUploader from './components/FileUploader';\r\nimport FileList from './components/FileList';\r\nimport ActivitySelector from './components/ActivitySelector';\r\nimport PlotViewer from './components/PlotViewer';\r\nimport './styles/App.css';\r\nimport InterpretationViewer from './components/InterpretationViewer';\r\nimport FeatureImportanceViewer from './components/FeatureImportanceViewer';\r\nimport TemporalValidationResults from './components/TemporalValidationResults';\r\nimport { fetchAvailableFiles, analyzeFile, runTemporalValidation } from './api/apiService';\r\n\r\nfunction App() {\r\n  // State management\r\n  const [files, setFiles] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [selectedActivities, setSelectedActivities] = useState({});\r\n  const [plots, setPlots] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [analysisProgress, setAnalysisProgress] = useState({});\r\n  \r\n  // Load available files on component mount\r\n  useEffect(() => {\r\n    const loadFiles = async () => {\r\n      try {\r\n        const availableFiles = await fetchAvailableFiles();\r\n        setFiles(availableFiles);\r\n      } catch (err) {\r\n        console.error('Error loading files:', err);\r\n        setError('Failed to load available files');\r\n      }\r\n    };\r\n    \r\n    loadFiles();\r\n  }, []);\r\n\r\n  // Handle file selection\r\n  const handleFileSelect = (fileId) => {\r\n    const isSelected = selectedFiles.includes(fileId);\r\n    \r\n    if (isSelected) {\r\n      setSelectedFiles(selectedFiles.filter(id => id !== fileId));\r\n      setSelectedActivities(prev => {\r\n        const updated = { ...prev };\r\n        delete updated[fileId];\r\n        return updated;\r\n      });\r\n    } else {\r\n      setSelectedFiles([...selectedFiles, fileId]);\r\n    }\r\n  };\r\n  const handleFileDelete = async (fileId) => {\r\n    try {\r\n      // Call API to delete the file (if you have a delete endpoint)\r\n      // await deleteFile(fileId);\r\n      \r\n      // Remove from selected files\r\n      if (selectedFiles.includes(fileId)) {\r\n        setSelectedFiles(selectedFiles.filter(id => id !== fileId));\r\n      }\r\n      \r\n      // Remove from selected activities\r\n      if (selectedActivities[fileId]) {\r\n        setSelectedActivities(prev => {\r\n          const updated = { ...prev };\r\n          delete updated[fileId];\r\n          return updated;\r\n        });\r\n      }\r\n      \r\n      // Remove from files list\r\n      setFiles(prev => prev.filter(file => file.id !== fileId));\r\n    } catch (err) {\r\n      console.error('Error deleting file:', err);\r\n      setError('Failed to delete file');\r\n    }\r\n  };\r\n  // Handle successful file upload\r\n  const handleFileUpload = (uploadedFile) => {\r\n    setFiles(prev => [...prev, uploadedFile]);\r\n  };\r\n\r\n  // Handle activity selection\r\n  const handleActivitySelect = (fileId, selectedActivitiesList) => {\r\n    setSelectedActivities(prev => ({\r\n      ...prev,\r\n      [fileId]: selectedActivitiesList\r\n    }));\r\n  };\r\n\r\n  // Handle analysis request\r\n  const handleAnalyze = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    setPlots({});\r\n    \r\n    // Initialize progress state for each file\r\n    const initialProgress = {};\r\n    selectedFiles.forEach(fileId => {\r\n      if (selectedActivities[fileId]?.length > 0) {\r\n        initialProgress[fileId] = { \r\n          status: 'preparing',\r\n          message: 'Preparing analysis...',\r\n          progress: 0 \r\n        };\r\n      }\r\n    });\r\n    setAnalysisProgress(initialProgress);\r\n    \r\n    try {\r\n      const results = {};\r\n      \r\n      for (const fileId of selectedFiles) {\r\n        if (selectedActivities[fileId] && selectedActivities[fileId].length > 0) {\r\n          // Update progress - starting analysis\r\n          setAnalysisProgress(prev => ({\r\n            ...prev, \r\n            [fileId]: {\r\n              status: 'loading',\r\n              message: 'Loading data and extracting features...',\r\n              progress: 10\r\n            }\r\n          }));\r\n          \r\n          // Wait a little to show first stage\r\n          await new Promise(r => setTimeout(r, 500));\r\n          \r\n          // Update progress - SVM tuning\r\n          setAnalysisProgress(prev => ({\r\n            ...prev, \r\n            [fileId]: {\r\n              status: 'tuning',\r\n              message: 'Tuning SVM classifier...',\r\n              progress: 30\r\n            }\r\n          }));\r\n          \r\n          await new Promise(r => setTimeout(r, 500));\r\n          \r\n          // Update progress - RandomForest tuning\r\n          setAnalysisProgress(prev => ({\r\n            ...prev, \r\n            [fileId]: {\r\n              status: 'tuning',\r\n              message: 'Tuning RandomForest classifier...',\r\n              progress: 60\r\n            }\r\n          }));\r\n          \r\n          await new Promise(r => setTimeout(r, 500));\r\n          \r\n          // Update progress - Ridge tuning  \r\n          setAnalysisProgress(prev => ({\r\n            ...prev, \r\n            [fileId]: {\r\n              status: 'tuning',\r\n              message: 'Tuning Ridge classifier...',\r\n              progress: 80\r\n            }\r\n          }));\r\n          \r\n          const fileResult = await analyzeFile(fileId, selectedActivities[fileId]);\r\n          \r\n          // Update progress - completed\r\n          setAnalysisProgress(prev => ({\r\n            ...prev, \r\n            [fileId]: {\r\n              status: 'completed',\r\n              message: 'Analysis completed',\r\n              progress: 100\r\n            }\r\n          }));\r\n          \r\n          // Log the most important feature\r\n          if (fileResult.features?.top_features?.length > 0) {\r\n            // Log feature details\r\n            const feature = fileResult.features.top_features[0];\r\n            const region = feature.split('_')[0] || 'unknown';\r\n            const wavelength = feature.includes('850') ? '850nm (oxyHb)' : \r\n                             feature.includes('760') ? '760nm (deoxyHb)' : 'unknown';\r\n            \r\n            console.log(`   Region: ${region}`);\r\n            console.log(`   Wavelength: ${wavelength}`);\r\n            console.log(`   Relative importance: Highest F-score among all features`);\r\n          } else {\r\n            console.log(`No important features found for ${fileId}`);\r\n          }\r\n          \r\n          results[fileId] = fileResult;\r\n        }\r\n      }\r\n      \r\n      setPlots(results);\r\n    } catch (err) {\r\n      console.error('Analysis error:', err);\r\n      setError('An error occurred during analysis');\r\n      \r\n      // Mark all analyses in progress as failed\r\n      setAnalysisProgress(prev => {\r\n        const updated = {...prev};\r\n        Object.keys(updated).forEach(fileId => {\r\n          if (updated[fileId].status !== 'completed') {\r\n            updated[fileId] = {\r\n              status: 'error',\r\n              message: 'Analysis failed',\r\n              progress: 0\r\n            };\r\n          }\r\n        });\r\n        return updated;\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  // Handle Temporal Validation request\r\n  const handleTemporalValidation = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    setPlots({}); // Clear previous results or decide if you want to merge/keep them\r\n\r\n    const initialProgress = {};\r\n    selectedFiles.forEach(fileId => {\r\n      if (selectedActivities[fileId]?.length > 0) {\r\n        initialProgress[fileId] = {\r\n          status: 'validating', // Specific status for validation\r\n          message: 'Preparing temporal validation...',\r\n          progress: 0\r\n        };\r\n      }\r\n    });\r\n    setAnalysisProgress(initialProgress);\r\n\r\n    try {\r\n      const validationResults = {};\r\n      for (const fileId of selectedFiles) {\r\n        if (selectedActivities[fileId] && selectedActivities[fileId].length > 0) {\r\n          setAnalysisProgress(prev => ({\r\n            ...prev,\r\n            [fileId]: {\r\n              status: 'validating',\r\n              message: 'Running temporal bias checks...',\r\n              progress: 50 // Mid-point progress\r\n            }\r\n          }));\r\n\r\n          // Call the temporal validation API endpoint\r\n          const fileResult = await runTemporalValidation(fileId, selectedActivities[fileId]);\r\n\r\n          setAnalysisProgress(prev => ({\r\n            ...prev,\r\n            [fileId]: {\r\n              status: 'completed', // Mark as completed after validation\r\n              message: 'Temporal validation completed',\r\n              progress: 100\r\n            }\r\n          }));\r\n\r\n          validationResults[fileId] = fileResult; // Store validation results\r\n        }\r\n      }\r\n      setPlots(validationResults); // Update state with validation results\r\n    } catch (err) {\r\n      console.error('Temporal validation error:', err);\r\n      setError('An error occurred during temporal validation');\r\n      // Mark ongoing validations as error\r\n      setAnalysisProgress(prev => {\r\n        const updated = {...prev};\r\n        Object.keys(updated).forEach(fileId => {\r\n          if (updated[fileId].status === 'validating') {\r\n            updated[fileId] = {\r\n              status: 'error',\r\n              message: 'Validation failed',\r\n              progress: 0\r\n            };\r\n          }\r\n        });\r\n        return updated;\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header className=\"app-header\">\r\n        <h1>NIRS Analysis Dashboard</h1>\r\n      </header>\r\n      \r\n      <main className=\"app-content\">\r\n        <section className=\"file-section\">\r\n          <h2>NIRS Files</h2>\r\n          <FileUploader onFileUpload={handleFileUpload} />\r\n          <FileList \r\n          files={files} \r\n          selectedFiles={selectedFiles}\r\n          onSelectFile={handleFileSelect}\r\n          onDeleteFile={handleFileDelete}\r\n          />\r\n        </section>\r\n        \r\n        <section className=\"activity-section\">\r\n          <h2>Activities</h2>\r\n          {selectedFiles.length > 0 ? (\r\n            selectedFiles.map(fileId => (\r\n              <ActivitySelector\r\n                key={fileId}\r\n                fileId={fileId}\r\n                fileName={files.find(file => file.id === fileId)?.name || fileId}\r\n                onSelectActivities={(activities) => handleActivitySelect(fileId, activities)}\r\n              />\r\n            ))\r\n          ) : (\r\n            <p className=\"info-text\">Select files to view available activities</p>\r\n          )}\r\n          \r\n          {selectedFiles.length > 0 && Object.keys(selectedActivities).length > 0 && (\r\n  <div className=\"button-group\">\r\n    <button \r\n      className=\"analyze-button\" \r\n      onClick={handleAnalyze}\r\n      disabled={loading}\r\n    >\r\n      {loading ? 'Analyzing...' : 'Analyze Selected Data'}\r\n    </button>\r\n    \r\n    <button \r\n      className=\"validate-button\" \r\n      disabled={loading} // This is correct, using 'loading' instead of 'isLoading'\r\n      onClick={handleTemporalValidation}\r\n    >\r\n      Validate Against Temporal Bias\r\n    </button>\r\n  </div>\r\n)}\r\n          \r\n          {error && <p className=\"error-message\">{error}</p>}\r\n          \r\n          {/* Progress indicator for each file */}\r\n          {Object.entries(analysisProgress).length > 0 && (\r\n            <div className=\"analysis-progress\">\r\n              {Object.entries(analysisProgress).map(([fileId, progress]) => (\r\n                <div key={fileId} className=\"file-progress\">\r\n                  <div className=\"file-progress-header\">\r\n                    <span>{files.find(file => file.id === fileId)?.name || fileId}</span>\r\n                    <span className={`status-badge ${progress.status}`}>\r\n                      {progress.status === 'tuning' && \r\n                        <span className=\"loading-dots\">⚙️ Optimizing parameters<span>.</span><span>.</span><span>.</span></span>\r\n                      }\r\n                      {progress.status === 'validating' && \r\n                        <span className=\"loading-dots\">🛡️ Validating<span>.</span><span>.</span><span>.</span></span>\r\n                      }\r\n                      {progress.status === 'loading' && '🔍 Analyzing'}\r\n                      {progress.status === 'completed' && '✅ Completed'}\r\n                      {progress.status === 'error' && '❌ Error'}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"progress-bar-container\">\r\n                    <div \r\n                      className={`progress-bar ${progress.status}`} \r\n                      style={{width: `${progress.progress}%`}}\r\n                    ></div>\r\n                  </div>\r\n                  <div className=\"progress-message\">{progress.message}</div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </section>\r\n        \r\n        <section className=\"results-section\">\r\n          <h2>Analysis Results</h2>\r\n          {Object.entries(plots).map(([fileId, plotData]) => (\r\n            <div key={fileId} className=\"result-container\">\r\n              <PlotViewer \r\n                key={`plot-${fileId}`}\r\n                fileName={files.find(file => file.id === fileId)?.name || fileId}\r\n                plotData={plotData} \r\n              />\r\n            {/* Add the FeatureImportanceViewer here */}\r\n            {plotData.plots?.feature_importance && plotData.features?.top_features && (\r\n              <FeatureImportanceViewer\r\n                key={`feat-imp-${fileId}`}\r\n                featureImportanceData={plotData.plots.feature_importance}\r\n                topFeatures={plotData.features.top_features}\r\n              />\r\n            )}\r\n            {plotData.temporal_validation && (\r\n            <TemporalValidationResults \r\n              validationData={plotData.temporal_validation} \r\n            />\r\n          )}\r\n            <InterpretationViewer \r\n              key={`interp-${fileId}`}\r\n              interpretationData={plotData.interpretation || {}}\r\n              topFeatures={plotData.features?.top_features || []}\r\n            />\r\n            </div>\r\n          ))}\r\n\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}