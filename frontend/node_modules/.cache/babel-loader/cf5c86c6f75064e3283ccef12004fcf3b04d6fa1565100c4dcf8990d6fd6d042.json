{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\OneDrive - Universidad de Deusto\\\\Documentos\\\\nirs_web_app\\\\frontend\\\\src\\\\components\\\\PlotViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlotViewer({\n  fileName,\n  plotData\n}) {\n  _s();\n  var _plotData$message;\n  // State to track which image is expanded (null means no image is expanded)\n  const [expandedImage, setExpandedImage] = useState(null);\n  if (!plotData || Object.keys(plotData).length === 0) {\n    return null;\n  }\n\n  // Function to handle image click to expand/collapse\n  const handleImageClick = (base64Image, plotName) => {\n    if (expandedImage && expandedImage.src === base64Image) {\n      // If clicking the currently expanded image, collapse it\n      setExpandedImage(null);\n    } else {\n      // Otherwise expand the clicked image\n      setExpandedImage({\n        src: base64Image,\n        name: plotName\n      });\n    }\n  };\n\n  // If there's an error message, display it with any diagnostic plots\n  const hasError = plotData.error || ((_plotData$message = plotData.message) === null || _plotData$message === void 0 ? void 0 : _plotData$message.includes('error'));\n\n  // Function to determine if a plot is an events plot\n  const isEventsPlot = plotName => {\n    return plotName.toLowerCase().includes('event') || plotName.toLowerCase() === 'events_plot' || plotName.toLowerCase().includes('timeline');\n  };\n\n  // Function to determine if a plot is a channels plot\n  const isChannelsPlot = plotName => {\n    return plotName.toLowerCase().includes('channel') && !plotName.toLowerCase().includes('visualization');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"plot-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"file-heading\",\n      children: fileName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), hasError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: plotData.error || \"Analysis could not be completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), plotData.message && !hasError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"analysis-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: plotData.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"plots-container\",\n      children: [Object.entries(plotData.plots || {}).filter(([plotName]) => isEventsPlot(plotName)).map(([plotName, base64Image]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plot-item plot-item-large\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: formatPlotName(plotName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-container image-container-large\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/png;base64,${base64Image}`,\n            alt: `${plotName} plot`,\n            className: \"plot-image\",\n            onClick: () => handleImageClick(base64Image, formatPlotName(plotName)),\n            style: {\n              cursor: 'pointer',\n              width: '100%',\n              maxHeight: '500px',\n              objectFit: 'contain'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this)]\n      }, plotName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)), Object.entries(plotData.plots || {}).filter(([plotName]) => isChannelsPlot(plotName)).map(([plotName, base64Image]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plot-item plot-item-large\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: formatPlotName(plotName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"scrollable-channels-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-container image-container-channels\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `data:image/png;base64,${base64Image}`,\n              alt: `${plotName} plot`,\n              className: \"plot-image plot-image-channels\",\n              onClick: () => handleImageClick(base64Image, formatPlotName(plotName)),\n              style: {\n                cursor: 'pointer'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"scroll-hint\",\n            children: \"Scroll down to see more channels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this)]\n      }, plotName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)), Object.entries(plotData.plots || {}).filter(([plotName]) => !isEventsPlot(plotName) && !isChannelsPlot(plotName)).map(([plotName, base64Image]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plot-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: formatPlotName(plotName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-container\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/png;base64,${base64Image}`,\n            alt: `${plotName} plot`,\n            className: \"plot-image\",\n            onClick: () => handleImageClick(base64Image, formatPlotName(plotName)),\n            style: {\n              cursor: 'pointer'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this)]\n      }, plotName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)), !plotData.plots && Object.entries(plotData).filter(([key, value]) => typeof value === 'string' && value.startsWith('iVBORw')).map(([plotName, base64Image]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `plot-item ${isEventsPlot(plotName) ? 'plot-item-large' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: formatPlotName(plotName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `image-container ${isEventsPlot(plotName) ? 'image-container-large' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/png;base64,${base64Image}`,\n            alt: `${plotName} plot`,\n            className: \"plot-image\",\n            onClick: () => handleImageClick(base64Image, formatPlotName(plotName)),\n            style: {\n              cursor: 'pointer',\n              ...(isEventsPlot(plotName) ? {\n                width: '100%',\n                maxHeight: '500px',\n                objectFit: 'contain'\n              } : {})\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, plotName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), expandedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expanded-image-overlay\",\n      onClick: () => setExpandedImage(null),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expanded-image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"expanded-image-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: expandedImage.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-button\",\n            onClick: e => {\n              e.stopPropagation();\n              setExpandedImage(null);\n            },\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/png;base64,${expandedImage.src}`,\n          alt: \"Expanded view\",\n          className: \"expanded-image\",\n          onClick: e => e.stopPropagation(),\n          style: {\n            maxWidth: '95%',\n            maxHeight: '85vh',\n            objectFit: 'contain'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(PlotViewer, \"+U8yK6q4A/WC0g7bofNq42VL6OQ=\");\n_c = PlotViewer;\nfunction formatPlotName(name) {\n  // Convert snake_case to Title Case\n  return name.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n}\nexport default PlotViewer;\nvar _c;\n$RefreshReg$(_c, \"PlotViewer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PlotViewer","fileName","plotData","_s","_plotData$message","expandedImage","setExpandedImage","Object","keys","length","handleImageClick","base64Image","plotName","src","name","hasError","error","message","includes","isEventsPlot","toLowerCase","isChannelsPlot","className","children","_jsxFileName","lineNumber","columnNumber","entries","plots","filter","map","formatPlotName","alt","onClick","style","cursor","width","maxHeight","objectFit","key","value","startsWith","e","stopPropagation","maxWidth","_c","split","word","charAt","toUpperCase","slice","join","$RefreshReg$"],"sources":["C:/Users/PC/OneDrive - Universidad de Deusto/Documentos/nirs_web_app/frontend/src/components/PlotViewer.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/components.css';\r\n\r\nfunction PlotViewer({ fileName, plotData }) {\r\n  // State to track which image is expanded (null means no image is expanded)\r\n  const [expandedImage, setExpandedImage] = useState(null);\r\n  \r\n  if (!plotData || Object.keys(plotData).length === 0) {\r\n    return null;\r\n  }\r\n\r\n  // Function to handle image click to expand/collapse\r\n  const handleImageClick = (base64Image, plotName) => {\r\n    if (expandedImage && expandedImage.src === base64Image) {\r\n      // If clicking the currently expanded image, collapse it\r\n      setExpandedImage(null);\r\n    } else {\r\n      // Otherwise expand the clicked image\r\n      setExpandedImage({ src: base64Image, name: plotName });\r\n    }\r\n  };\r\n\r\n  // If there's an error message, display it with any diagnostic plots\r\n  const hasError = plotData.error || plotData.message?.includes('error');\r\n  \r\n  // Function to determine if a plot is an events plot\r\n  const isEventsPlot = (plotName) => {\r\n    return plotName.toLowerCase().includes('event') || \r\n           plotName.toLowerCase() === 'events_plot' ||\r\n           plotName.toLowerCase().includes('timeline');\r\n  };\r\n  \r\n  // Function to determine if a plot is a channels plot\r\n  const isChannelsPlot = (plotName) => {\r\n    return plotName.toLowerCase().includes('channel') &&\r\n          !plotName.toLowerCase().includes('visualization');\r\n  };\r\n  \r\n  return (\r\n    <div className=\"plot-viewer\">\r\n      <h3 className=\"file-heading\">{fileName}</h3>\r\n      \r\n      {hasError && (\r\n        <div className=\"error-message\">\r\n          <p>{plotData.error || \"Analysis could not be completed\"}</p>\r\n        </div>\r\n      )}\r\n      \r\n      {plotData.message && !hasError && (\r\n        <div className=\"analysis-message\">\r\n          <p>{plotData.message}</p>\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"plots-container\">\r\n        {/* Display events plots first and larger */}\r\n        {Object.entries(plotData.plots || {})\r\n          .filter(([plotName]) => isEventsPlot(plotName))\r\n          .map(([plotName, base64Image]) => (\r\n            <div key={plotName} className=\"plot-item plot-item-large\">\r\n              <h4>{formatPlotName(plotName)}</h4>\r\n              <div className=\"image-container image-container-large\">\r\n                <img \r\n                  src={`data:image/png;base64,${base64Image}`} \r\n                  alt={`${plotName} plot`}\r\n                  className=\"plot-image\"\r\n                  onClick={() => handleImageClick(base64Image, formatPlotName(plotName))}\r\n                  style={{ cursor: 'pointer', width: '100%', maxHeight: '500px', objectFit: 'contain' }}\r\n                />\r\n              </div>\r\n            </div>\r\n          ))}\r\n        \r\n        {/* Display channels plot with scrollable container */}\r\n        {Object.entries(plotData.plots || {})\r\n          .filter(([plotName]) => isChannelsPlot(plotName))\r\n          .map(([plotName, base64Image]) => (\r\n            <div key={plotName} className=\"plot-item plot-item-large\">\r\n              <h4>{formatPlotName(plotName)}</h4>\r\n              <div className=\"scrollable-channels-container\">\r\n                <div className=\"image-container image-container-channels\">\r\n                  <img \r\n                    src={`data:image/png;base64,${base64Image}`} \r\n                    alt={`${plotName} plot`}\r\n                    className=\"plot-image plot-image-channels\"\r\n                    onClick={() => handleImageClick(base64Image, formatPlotName(plotName))}\r\n                    style={{ cursor: 'pointer' }}\r\n                  />\r\n                </div>\r\n                <div className=\"scroll-hint\">\r\n                  Scroll down to see more channels\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        \r\n        {/* Display other plots normally */}\r\n        {Object.entries(plotData.plots || {})\r\n          .filter(([plotName]) => !isEventsPlot(plotName) && !isChannelsPlot(plotName))\r\n          .map(([plotName, base64Image]) => (\r\n            <div key={plotName} className=\"plot-item\">\r\n              <h4>{formatPlotName(plotName)}</h4>\r\n              <div className=\"image-container\">\r\n                <img \r\n                  src={`data:image/png;base64,${base64Image}`} \r\n                  alt={`${plotName} plot`}\r\n                  className=\"plot-image\"\r\n                  onClick={() => handleImageClick(base64Image, formatPlotName(plotName))}\r\n                  style={{ cursor: 'pointer' }}\r\n                />\r\n              </div>\r\n            </div>\r\n          ))}\r\n        \r\n        {/* Handle case where plots aren't nested in a plots object */}\r\n        {!plotData.plots && Object.entries(plotData).filter(([key, value]) => \r\n          typeof value === 'string' && value.startsWith('iVBORw')\r\n        ).map(([plotName, base64Image]) => (\r\n          <div key={plotName} className={`plot-item ${isEventsPlot(plotName) ? 'plot-item-large' : ''}`}>\r\n            <h4>{formatPlotName(plotName)}</h4>\r\n            <div className={`image-container ${isEventsPlot(plotName) ? 'image-container-large' : ''}`}>\r\n              <img \r\n                src={`data:image/png;base64,${base64Image}`} \r\n                alt={`${plotName} plot`}\r\n                className=\"plot-image\"\r\n                onClick={() => handleImageClick(base64Image, formatPlotName(plotName))}\r\n                style={{ \r\n                  cursor: 'pointer',\r\n                  ...(isEventsPlot(plotName) ? { width: '100%', maxHeight: '500px', objectFit: 'contain' } : {})\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      {/* Modal for expanded image */}\r\n      {expandedImage && (\r\n        <div className=\"expanded-image-overlay\" onClick={() => setExpandedImage(null)}>\r\n          <div className=\"expanded-image-container\">\r\n            <div className=\"expanded-image-header\">\r\n              <h3>{expandedImage.name}</h3>\r\n              <button className=\"close-button\" onClick={(e) => {\r\n                e.stopPropagation();\r\n                setExpandedImage(null);\r\n              }}>\r\n                &times;\r\n              </button>\r\n            </div>\r\n            <img \r\n              src={`data:image/png;base64,${expandedImage.src}`} \r\n              alt=\"Expanded view\" \r\n              className=\"expanded-image\"\r\n              onClick={(e) => e.stopPropagation()}\r\n              style={{ maxWidth: '95%', maxHeight: '85vh', objectFit: 'contain' }}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction formatPlotName(name) {\r\n  // Convert snake_case to Title Case\r\n  return name\r\n    .split('_')\r\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(' ');\r\n}\r\n\r\nexport default PlotViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}